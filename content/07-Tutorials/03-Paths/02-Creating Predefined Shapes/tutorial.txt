Paper.js allows you to create path items with predefined shapes of variable dimensions.

In the same way that the <api Path() /> constructor creates an empty path with no points, we have constructors such as <api Path.Circle(center,radius) /> and <api Path.Rectangle(point,size) /> that create paths and automatically add segments to them to create predefined shapes.
Paper.js allows you to create path items with predefined shapes of variable dimensions.

<title>Circle Shaped Paths</title>

Using the <api Path.Circle(center,radius) /> constructor, we can produces circle shaped paths.

The following code produces a circle shaped path with a center point at <code>{x: 100, y: 70}</code> and a radius of 50 pt:
<paperscript height=140 split=true>
var myCircle = new Path.Circle(new Point(100, 70), 50);
myCircle.fillColor = 'black';
</paperscript>

<title>Rectangular Shaped Paths</title>

To create a rectangular shaped path you can pass a <api Rectangle /> to the <api Path.Rectangle(rect) /> constructor.

<note>A <api Rectangle /> object is an abstract representation of a rectangle. Please read the <page "/tutorials/geometry/point-size-and-rectangle/" /> tutorial to find out how to work with the <code>Rectangle</code> object.</note>

For example, let's make a <code>Rectangle</code> between <code>{x: 0, y: 0}</code> and <code>{x: 50, y: 50}</code> and then use the <api Path.Rectangle(rect) /> constructor to create a path with the shape that it describes:

<paperscript height=140 split=true>
var rectangle = new Rectangle(new Point(50, 50), new Point(150, 100));
var path = new Path.Rectangle(rectangle);
path.fillColor = '#e9e9ff';
path.selected = true;
</paperscript>

<title short="Rounded Rectangles">Rectangular Shaped Paths with Rounded Corners</title>

To create rectangular shaped paths with rounded corners, we use the <api Path.Rectangle(rectangle)>new Path.Rectangle(rectangle, radius)</api> constructor. The <code>rectangle</code> parameter describes the <api Rectangle /> and the <code>radius</code> parameter describes the <api Size /> of the rounded corners.

For example, the following script creates a rectangular shaped path with 20 pt * 20 pt corners:
<paperscript height=140 split=true>
var rectangle = new Rectangle(new Point(50, 50), new Point(150, 100));
var radius = new Size(20, 20);
var path = new Path.Rectangle(rectangle, radius);
path.fillColor = 'black';
</paperscript>

<title>Regular Polygon Shaped Paths</title>

To create regular polygon shaped paths, we use the <api Path.RegularPolygon(center,sides,radius) /> constructor.

The <api Point>center</api> parameter describes the center point of the polygon, the <code>sides</code> parameter describes the amount of sides the polygon has and the <code>radius</code> parameter describes the radius of the polygon.

For example, lets create a triangle shaped path and a decagon shaped path:
<paperscript height=140 split=true>
// Create a triangle shaped path 
var triangle = new Path.RegularPolygon(new Point(80, 70), 3, 50);
triangle.fillColor = '#e9e9ff';
triangle.selected = true;

// Create a decagon shaped path 
var decagon = new Path.RegularPolygon(new Point(200, 70), 10, 50);
decagon.fillColor = '#e9e9ff';
decagon.selected = true;
</paperscript>

<tip>
You can check the constructors section of the <api Path>Path reference</api> for a full list of Path constructors.
</tip>